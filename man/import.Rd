% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import_export.R, R/import_export_other.R
\name{import}
\alias{import}
\alias{import_rds}
\alias{readRDS}
\alias{import_xlsx}
\alias{import_excel}
\alias{import_csv}
\alias{import_csv2}
\alias{import_tsv}
\alias{import_txt}
\alias{import_sav}
\alias{import_spss}
\alias{import_feather}
\alias{decrypt_object}
\alias{import_clipboard}
\alias{import_mail_attachment}
\alias{import_url}
\alias{import_teams}
\title{Import Data Sets}
\usage{
import(
  filename,
  project_number = project_get_current_id(ask = FALSE),
  auto_transform = TRUE,
  encoding = "UTF-8",
  key = read_secret("tools.encryption_password"),
  ...
)

import_rds(
  filename,
  project_number = project_get_current_id(ask = FALSE),
  key = read_secret("tools.encryption_password"),
  ...
)

readRDS(
  filename,
  project_number = project_get_current_id(ask = FALSE),
  key = read_secret("tools.encryption_password"),
  ...
)

import_xlsx(
  filename,
  project_number = project_get_current_id(ask = FALSE),
  sheet = 1,
  range = NULL,
  auto_transform = TRUE,
  datenames = "nl",
  dateformat = "yyyy-mm-dd",
  timeformat = "HH:MM",
  decimal.mark = dec_mark(),
  big.mark = "",
  timezone = "UTC",
  na = c("", "NULL", "NA", "<NA>"),
  skip = 0,
  ...
)

import_excel(
  filename,
  project_number = project_get_current_id(ask = FALSE),
  sheet = 1,
  range = NULL,
  auto_transform = TRUE,
  datenames = "nl",
  dateformat = "yyyy-mm-dd",
  timeformat = "HH:MM",
  decimal.mark = dec_mark(),
  big.mark = "",
  timezone = "UTC",
  na = c("", "NULL", "NA", "<NA>"),
  skip = 0,
  ...
)

import_csv(
  filename,
  project_number = project_get_current_id(ask = FALSE),
  auto_transform = TRUE,
  datenames = "nl",
  dateformat = "yyyy-mm-dd",
  timeformat = "HH:MM",
  decimal.mark = ".",
  big.mark = "",
  timezone = "UTC",
  na = c("", "NULL", "NA", "<NA>"),
  skip = 0,
  encoding = "UTF-8",
  ...
)

import_csv2(
  filename,
  project_number = project_get_current_id(ask = FALSE),
  auto_transform = TRUE,
  datenames = "nl",
  dateformat = "yyyy-mm-dd",
  timeformat = "HH:MM",
  decimal.mark = ",",
  big.mark = "",
  timezone = "UTC",
  na = c("", "NULL", "NA", "<NA>"),
  skip = 0,
  encoding = "UTF-8",
  ...
)

import_tsv(
  filename,
  project_number = project_get_current_id(ask = FALSE),
  auto_transform = TRUE,
  datenames = "nl",
  dateformat = "yyyy-mm-dd",
  timeformat = "HH:MM",
  decimal.mark = ".",
  big.mark = "",
  timezone = "UTC",
  na = c("", "NULL", "NA", "<NA>"),
  skip = 0,
  encoding = "UTF-8",
  ...
)

import_txt(
  filename,
  project_number = project_get_current_id(ask = FALSE),
  auto_transform = TRUE,
  sep = "\\t",
  datenames = "nl",
  dateformat = "yyyy-mm-dd",
  timeformat = "HH:MM",
  decimal.mark = ",",
  big.mark = "",
  timezone = "UTC",
  na = c("", "NULL", "NA", "<NA>"),
  skip = 0,
  encoding = "UTF-8",
  ...
)

import_sav(
  filename,
  project_number = project_get_current_id(ask = FALSE),
  auto_transform = TRUE,
  datenames = "en",
  dateformat = "yyyy-mm-dd",
  timeformat = "HH:MM",
  decimal.mark = ".",
  big.mark = "",
  timezone = "UTC",
  na = c("", "NULL", "NA", "<NA>"),
  ...
)

import_spss(
  filename,
  project_number = project_get_current_id(ask = FALSE),
  auto_transform = TRUE,
  datenames = "en",
  dateformat = "yyyy-mm-dd",
  timeformat = "HH:MM",
  decimal.mark = ".",
  big.mark = "",
  timezone = "UTC",
  na = c("", "NULL", "NA", "<NA>"),
  ...
)

import_feather(
  filename,
  project_number = project_get_current_id(ask = FALSE),
  col_select = everything(),
  ...
)

decrypt_object(object, key = read_secret("tools.encryption_password"))

import_clipboard(
  sep = "\\t",
  header = TRUE,
  startrow = 1,
  auto_transform = TRUE,
  datenames = "nl",
  dateformat = "yyyy-mm-dd",
  timeformat = "HH:MM",
  decimal.mark = dec_mark(),
  big.mark = "",
  timezone = "UTC",
  na = c("", "NULL", "NA", "<NA>"),
  ...
)

import_mail_attachment(
  search = "hasattachment:yes",
  search_subject = NULL,
  search_from = NULL,
  search_when = NULL,
  search_attachment = NULL,
  folder = certemail::get_inbox_name(account = account),
  n = 5,
  sort = "received desc",
  account = certemail::connect_outlook(),
  auto_transform = TRUE,
  sep = ",",
  ...
)

import_url(
  url,
  auto_transform = TRUE,
  sep = ",",
  datenames = "en",
  dateformat = "yyyy-mm-dd",
  timeformat = "HH:MM",
  decimal.mark = ".",
  big.mark = "",
  timezone = "UTC",
  na = c("", "NULL", "NA", "<NA>"),
  skip = 0,
  encoding = "UTF-8",
  ...
)

import_teams(
  full_teams_path = NULL,
  account = connect_teams(),
  auto_transform = TRUE,
  sep = ",",
  datenames = "en",
  dateformat = "yyyy-mm-dd",
  timeformat = "HH:MM",
  decimal.mark = ".",
  big.mark = "",
  timezone = "UTC",
  na = c("", "NULL", "NA", "<NA>"),
  skip = 0,
  encoding = "UTF-8"
)
}
\arguments{
\item{filename}{the full path of the file to be imported, will be parsed to a \link{character}, can also be a remote location (from http/https/ftp/ssh, GitHub/GitLab)}

\item{project_number}{a Microsoft Planner project number}

\item{auto_transform}{transform the imported data with \code{\link[=auto_transform]{auto_transform()}}}

\item{encoding}{Default encoding. This only affects how the file is read.}

\item{key}{a character to decrypt the file, see \code{\link[=export]{export()}} for explanation of \code{key}. For manual decryption, run \code{\link[=decrypt_object]{decrypt_object()}}.}

\item{...}{arguments passed on to methods}

\item{sheet}{Excel sheet to import, defaults to first sheet}

\item{range}{a cell range to read from, allows typical Excel ranges such as "B3:D87" and "Budget!B2:G14"}

\item{datenames}{language of the date names, such as weekdays and months}

\item{dateformat}{expected date format, will be coerced with \code{\link[cleaner:format_datetime]{format_datetime()}}}

\item{timeformat}{expected time format, will be coerced with \code{\link[cleaner:format_datetime]{format_datetime()}}}

\item{decimal.mark}{separator for decimal numbers}

\item{big.mark}{separator for thousands}

\item{timezone}{expected time zone}

\item{na}{values to interpret as \code{NA}}

\item{skip}{number of first rows to skip}

\item{sep}{character to separate values in a row}

\item{col_select}{columns to select, supports the \link[tidyselect:language]{tidyselect language})}

\item{object}{object to decrypt}

\item{header}{use first row as header}

\item{startrow}{first row to start importing}

\item{search}{an ODATA filter, ignores \code{sort} and defaults to search only mails with attachments}

\item{search_subject}{a \link{character}, equal to \code{search = "subject:(search_subject)"}, case-insensitive}

\item{search_from}{a \link{character}, equal to \code{search = "from:(search_from)"}, case-insensitive}

\item{search_when}{a \link{Date} vector of size 1 or 2, equal to \code{search = "received:date1..date2"}, see \emph{Examples}}

\item{search_attachment}{a \link{character} to use a regular expression for attachment file names}

\item{folder}{email folder name to search in, defaults to Inbox of the current user by calling \code{\link[certemail:get_inbox_name]{get_inbox_name()}}}

\item{n}{maximum number of emails to search}

\item{sort}{initial sorting}

\item{account}{a Teams account from Azure or an \code{AzureAuth} Microsoft 365 token, e.g. retrieved with \code{\link[certeprojects:connect]{certeprojects::connect_teams()}}}

\item{url}{remote location of any data set, can also be a (non-raw) GitHub/GitLab link}

\item{full_teams_path}{a full path in Teams, \strong{including the Team name and the channel name}. Leave blank to use interactive mode, which allows file/folder picking from a list in the console.}
}
\description{
These functions can be used to import data, from local or remote paths, or from the internet. They work closely with the \code{certeprojects} package to support Microsoft Planner project numbers. To support row names and older R versions, \verb{import_*()} functions return plain \link{data.frame}s, not e.g. \link[tibble:tibble]{tibble}s.
}
\details{
Importing any unlisted filetype using \code{\link[=import]{import()}} requires the \code{rio} package to be installed.

Importing an Excel file using \code{\link[=import_xlsx]{import_xlsx()}} or \code{\link[=import_excel]{import_excel()}} requires the \code{readxl} package to be installed.

Importing an SPSS file using \code{\link[=import_sav]{import_sav()}} or \code{\link[=import_spss]{import_spss()}} requires the \code{haven} package to be installed.

Importing a Feather file using \code{\link[=import_feather]{import_feather()}} requires the \code{arrow} package to be installed. \href{https://arrow.apache.org/docs/python/feather.html}{Apache Feather} provides efficient binary columnar serialization for data sets, enabling easy sharing data across data analysis languages (such as between Python and R). Use the \code{col_select} argument (which supports the \link[tidyselect:language]{tidyselect language}) for specific data selection to improve importing speed.

Importing the clipboard using \code{\link[=import_clipboard]{import_clipboard()}} requires the \code{clipr} package to be installed.

Importing mail attachments using \code{\link[=import_mail_attachment]{import_mail_attachment()}} requires the \code{certemail} package to be installed. It calls \code{\link[certemail:download_mail_attachment]{download_mail_attachment()}} internally and saves the attachment to a temporary folder. For all folder names, run: \code{sapply(certemail::connect_outlook()$list_folders(), function(x) x$properties$displayName)}.

The \code{\link[=import_url]{import_url()}} function tries to download the file first, after which it will be imported using the appropriate \verb{import_*()} function.

The \code{\link[=import_teams]{import_teams()}} function uses \code{\link[certeprojects:teams]{certeprojects::teams_download_file()}} to provide an interactive way to select a file in any Team, to download the file, and to import the file using the appropriate \verb{import_*()} function.
}
\examples{
export_csv(iris)
import_csv("iris") |> head()

# the above is equal to:
# export(iris, "iris.csv")
# import("iris.csv") |> head()


# row names are also supported
export_csv(mtcars)
import_csv("mtcars") |> head()


# Apache's Feather format is column-based
# and allow for specific and fast file reading
library(dplyr, warn.conflicts = FALSE)
starwars |> export_feather()
import("starwars.feather",
       col_select = starts_with("h")) |> 
  head()
  

# (cleanup)
file.remove("iris.csv")
file.remove("mtcars.csv")
file.remove("starwars.feather")

\dontrun{

# ---- Microsoft Teams support -------------------------------------------

# IMPORTING

# import from Teams by picking a folder interactively from any Team
x <- import_teams()

# to NOT pick a Teams folder (e.g. in non-interactive mode), set `full_teams_path`
x <- import_teams(full_teams_path = "MyTeam/MyChannel/MyFolder/MyFile.xlsx")


# EXPORTING

# export to Teams by picking a folder interactively from any Team
mtcars |> export_teams()

# the default is RDS, but you can set `filename` to specify yourself
mtcars |> export_teams("mtcars.xlsx")

# to NOT pick a Teams folder (e.g. in non-interactive mode), set `full_teams_path`
mtcars |> export_teams("mtcars.xlsx", full_teams_path = "MyTeam/MyChannel/MyFolder")
mtcars |> export_teams(full_teams_path = "MyTeam/MyChannel/MyFolder")

}
}
\seealso{
\code{\link[=export]{export()}}
}
