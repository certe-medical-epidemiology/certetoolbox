% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/import_export.R, R/import_export_other.R
\name{export}
\alias{export}
\alias{export_rds}
\alias{export_xlsx}
\alias{export_excel}
\alias{export_csv}
\alias{export_csv2}
\alias{export_tsv}
\alias{export_txt}
\alias{export_sav}
\alias{export_spss}
\alias{export_feather}
\alias{export_parquet}
\alias{export_pdf}
\alias{export_png}
\alias{export_html}
\alias{export_clipboard}
\alias{export_teams}
\title{Export Data Sets and Plots}
\usage{
export(
  object,
  filename = NULL,
  project_number = project_get_current_id(ask = FALSE),
  overwrite = NULL,
  fn = NULL,
  ...
)

export_rds(
  object,
  filename = NULL,
  project_number = project_get_current_id(ask = FALSE),
  overwrite = NULL,
  ...
)

export_xlsx(
  ...,
  filename = NULL,
  project_number = project_get_current_id(ask = FALSE),
  overwrite = NULL,
  sheet_names = NULL,
  autofilter = TRUE,
  rows_zebra = TRUE,
  cols_zebra = FALSE,
  freeze_top_row = TRUE,
  table_style = "TableStyleMedium2",
  align = "center"
)

export_excel(
  ...,
  filename = NULL,
  project_number = project_get_current_id(ask = FALSE),
  overwrite = NULL,
  sheet_names = NULL,
  autofilter = TRUE,
  rows_zebra = TRUE,
  cols_zebra = FALSE,
  freeze_top_row = TRUE,
  table_style = "TableStyleMedium2",
  align = "center"
)

export_csv(
  object,
  filename = NULL,
  project_number = project_get_current_id(ask = FALSE),
  overwrite = NULL,
  na = "",
  ...
)

export_csv2(
  object,
  filename = NULL,
  project_number = project_get_current_id(ask = FALSE),
  overwrite = NULL,
  na = "",
  ...
)

export_tsv(
  object,
  filename = NULL,
  project_number = project_get_current_id(ask = FALSE),
  overwrite = NULL,
  na = "",
  ...
)

export_txt(
  object,
  filename = NULL,
  project_number = project_get_current_id(ask = FALSE),
  overwrite = NULL,
  sep = "\\t",
  na = "",
  ...
)

export_sav(
  object,
  filename = NULL,
  project_number = project_get_current_id(ask = FALSE),
  overwrite = NULL,
  ...
)

export_spss(
  object,
  filename = NULL,
  project_number = project_get_current_id(ask = FALSE),
  overwrite = NULL,
  ...
)

export_feather(
  object,
  filename = NULL,
  project_number = project_get_current_id(ask = FALSE),
  overwrite = NULL,
  ...
)

export_parquet(
  object,
  filename = NULL,
  project_number = project_get_current_id(ask = FALSE),
  overwrite = NULL,
  ...
)

export_pdf(
  plot,
  filename = NULL,
  project_number = project_get_current_id(ask = FALSE),
  overwrite = NULL,
  size = "A5",
  portrait = FALSE,
  ...
)

export_png(
  plot,
  filename = NULL,
  project_number = project_get_current_id(ask = FALSE),
  overwrite = NULL,
  width = 1000,
  height = 800,
  dpi = NULL,
  ...
)

export_html(
  plot,
  filename = NULL,
  project_number = project_get_current_id(ask = FALSE),
  overwrite = NULL,
  ...
)

export_clipboard(
  object,
  sep = "\\t",
  na = "",
  header = TRUE,
  quote = FALSE,
  decimal.mark = dec_mark(),
  ...
)

export_teams(
  object,
  filename = NULL,
  full_teams_path = NULL,
  account = connect_teams(),
  ...
)
}
\arguments{
\item{object, plot}{the \R object to export}

\item{filename}{the full path of the exported file}

\item{project_number}{a Microsoft Planner project number}

\item{overwrite}{a \link{logical} value to indicate if an existing file must be overwritten. In \link[base:interactive]{interactive mode}, this will be asked if the file exists. In non-interactive mode, this has a special default behaviour: the original file will be copied to \code{filename_datetime.ext} before overwriting the file. Exporting with existing files is always non-destructive: if exporting fails, the original, existing file will not be altered.}

\item{fn}{a manual export function, such as \code{haven::write_sas} to write SAS files. This function has to have the object as first argument and the future file location as second argument.}

\item{...}{arguments passed on to methods}

\item{sheet_names}{sheet names}

\item{autofilter}{create autofilter on columns in first row}

\item{rows_zebra}{create banded rows}

\item{cols_zebra}{create banded columns}

\item{freeze_top_row}{freeze the first row of the sheet}

\item{table_style}{style(s) for each table, see below. This can also be a vector with the same length as \code{...}.}

\item{align}{horizontal alignment of text}

\item{na}{replacement character for empty values (default: \code{""})}

\item{sep}{separator for values in a row (default: tab)}

\item{size}{paper size, defaults to A5. Can be A0 to A7.}

\item{portrait}{portrait mode, defaults to \code{FALSE} (i.e., landscape mode)}

\item{width}{required width of the PNG file in pixels}

\item{height}{required height of the PNG file in pixels}

\item{dpi}{plot resolution, defaults to DPI set in \code{showtext} package}

\item{header}{(for \code{\link[=export_clipboard]{export_clipboard()}}) use column names as header (default: \code{TRUE})}

\item{quote}{(for \code{\link[=export_clipboard]{export_clipboard()}}) use quotation marks (default: \code{FALSE})}

\item{decimal.mark}{(for \code{\link[=export_clipboard]{export_clipboard()}}) character to use for decimal numbers, defaults to \code{\link[=dec_mark]{dec_mark()}}}

\item{full_teams_path}{path in Teams to export object to. Can be left blank to use interactive folder picking mode in the console.}

\item{account}{a Teams account from Azure or an \code{AzureAuth} Microsoft 365 token, e.g. retrieved with \code{\link[certeprojects:connect]{certeprojects::connect_teams()}}}
}
\description{
These functions can be used to export data sets and plots. They invisibly return the object itself again, allowing for usage in pipes (except for the plot-exporting functions \code{\link[=export_pdf]{export_pdf()}}, \code{\link[=export_png]{export_png()}} and \code{\link[=export_html]{export_html()}}). The functions work closely together with the \code{certeprojects} package to support Microsoft Planner project numbers.
}
\details{
The \code{\link[=export]{export()}} function can export to any file format, also with a manually set export function when passed on to the \code{fn} argument. This function \code{fn} has to have the object as first argument and the future file location as second argument. If \code{fn} is left blank, the \verb{export_*} function will be used based on the filename.

RDS files as created using \code{\link[=export_rds]{export_rds()}} are compatible with R3 and R4.

The \code{\link[=export_xlsx]{export_xlsx()}} and \code{\link[=export_excel]{export_excel()}} functions use \code{\link[=as_excel]{save_excel(as_excel(...))}} internally. \strong{IMPORTANT}: these two functions can accept more than one \link{data.frame}. When naming the data sets, the names will become sheet names in the resulting Excel file. For a complete visual overview of supported table styles, see \code{\link[=as_excel]{as_excel()}}. If the last value in \code{...} is a \link{character} of length 1 and \code{filename} is \code{NULL}, this value is assumed to be the filename.

For \code{\link[=export_csv]{export_csv()}}, \code{\link[=export_csv2]{export_csv2()}} and \code{\link[=export_tsv]{export_tsv()}}, files will be saved in UTF-8 encoding and \code{NA} values will be exported as \code{""} at default. Like other \verb{*.csv} and \verb{*.csv2} functions, csv is comma (\verb{,}) separated and csv2 is semicolon (\verb{;}) separated.

The \code{\link[=export_txt]{export_txt()}} function exports to a tab-separated file.

Exporting to an SPSS file using \code{\link[=export_sav]{export_sav()}} or \code{\link[=export_spss]{export_spss()}} requires the \code{haven} package to be installed.

Exporting to a Feather file using \code{\link[=export_feather]{export_feather()}} requires the \code{arrow} package to be installed. \href{https://arrow.apache.org/docs/python/feather.html}{Apache Feather} provides efficient binary columnar serialization for data sets, enabling easy sharing data across data analysis languages (such as between Python and R).

Exporting to a Parquet file using \code{\link[=export_parquet]{export_parquet()}} requires the \code{arrow} package to be installed. \href{https://parquet.apache.org}{Apache Parquet} is an open source, column-oriented data file format designed for efficient data storage and retrieval.

Exporting to a PDF file using \code{\link[=export_pdf]{export_pdf()}} requires the \code{ggplot2} package to be installed. If the filename is left blank in \code{\link[=export_pdf]{export_pdf()}}, \code{\link[=export_png]{export_png()}} or \code{\link[=export_html]{export_html()}}, the title of \code{plot} will be used if it's available and the \code{certeplot2} package is installed, and a timestamp otherwise. \strong{NOTE:} All export functions invisibly return \code{object} again, but the plotting functions invisibly return the file path

Exporting to a PNG file using \code{\link[=export_png]{export_png()}} requires the \code{ggplot2} and \code{showtext} packages to be installed.

Exporting to an HTML file using \code{\link[=export_html]{export_html()}} requires the \code{ggplot2} and \code{htmltools} packages to be installed. The arguments put in \code{...} will be passed on to \code{\link[plotly:layout]{plotly::layout()}} if \code{plot} is not yet a Plotly object (but rather a \code{ggplot2} object), which of course then requires the \code{plotly} package to be installed as well.

Exporting to the clipboard using \code{\link[=export_clipboard]{export_clipboard()}} requires the \code{clipr} package to be installed. The function allows any object (also other than \link{data.frame}s) to be exported to the clipboard and is only limited to the available amount of RAM memory.

Exporting to Microsoft Teams using \code{\link[=export_teams]{export_teams()}} requires the \code{AzureGraph} package to be installed. The function allows any object (also other than \link{data.frame}s) to be exported to any Team channel. The filename set in \code{filename} will determine the exported file type and defaults to an \link[=saveRDS]{RDS file}.
}
\examples{
library(dplyr, warn.conflicts = FALSE)

# export to two files: 'whole_file.rds' and 'first_ten_rows.xlsx'
starwars |>
  export_rds("whole_file") |>
  slice(1:10) |>
  export_xlsx("first_ten_rows")
  
# the above is equal to:
# starwars |>
#   export("whole_file.rds") |>
#   slice(1:10) |>
#   export("first_ten_rows.xlsx")


# Apache's Feather and Parquet formats are column-based
# and allow for cross-language specific and fast file reading
starwars |> export_feather()
import("starwars.feather",
       col_select = starts_with("h")) |> 
  head()
  

# (cleanup)
file.remove("whole_file.rds")
file.remove("first_ten_rows.xlsx")
file.remove("starwars.feather")

\dontrun{

# ---- Microsoft Teams support -------------------------------------------

# IMPORTING

# import from Teams by picking a folder interactively from any Team
x <- import_teams()

# to NOT pick a Teams folder (e.g. in non-interactive mode), set `full_teams_path`
x <- import_teams(full_teams_path = "MyTeam/MyChannel/MyFolder/MyFile.xlsx")


# EXPORTING

# export to Teams by picking a folder interactively from any Team
mtcars |> export_teams()

# the default is RDS, but you can set `filename` to specify yourself
mtcars |> export_teams("mtcars.xlsx")

# to NOT pick a Teams folder (e.g. in non-interactive mode), set `full_teams_path`
mtcars |> export_teams("mtcars.xlsx", full_teams_path = "MyTeam/MyChannel/MyFolder")
mtcars |> export_teams(full_teams_path = "MyTeam/MyChannel/MyFolder")

}
}
\seealso{
\code{\link[=import]{import()}}
}
